# Homework JavaScript Avanzado I

## Scope & Hoisting

Determiná que será impreso en la consola, sin ejecutar el código.

> Investiga cuál es la diferencia entre declarar una variable con `var` y directamente asignarle un valor.

```javascript
x = 1;
var a = 5;
var b = 10;
var c = function(a, b, c) {
  var x = 10;
  console.log(x);  // 10 porque x esta dentro del mismo lexical enviroment
  console.log(a); // 8 
  var f = function(a, b, c) {
    b = a;
    console.log(b); //8
    b = c;
    var x = 5;
  }
  f(a,b,c);  //9
  console.log(b);//10
}
c(8,9,10); 
console.log(b); //10
console.log(x); //1
```

```javascript
console.log(bar);//undefined
console.log(baz);//error ,el hoisting no la identifica, y corta la ejecucion en esta linea
foo(); //Hola!
function foo() { console.log('Hola!'); }
var bar = 1;
baz = 2;
```

```javascript
var instructor = "Tony";
if(true) {
    var instructor = "Franco"; 
}
console.log(instructor);// Franco porque el if no es un contexto de ejecucion, es un statement
                        // solo las funciones invocadas son un contexto de ejecucion
```                     

```javascript
var instructor = "Tony";
console.log(instructor);//Tony
(function() {
   if(true) {
      var instructor = "Franco";
      console.log(instructor); //Franco
   }
})();
console.log(instructor); //Tony
```

```javascript
var instructor = "Tony";
let pm = "Franco";
if (true) {
    var instructor = "The Flash";
    let pm = "Reverse Flash";
    console.log(instructor); //"The Flash"
    console.log(pm); // "reverse flash"
}
console.log(instructor);//"The Flash"
console.log(pm);//"Franco"
```
### Coerción de Datos

¿Cuál crees que será el resultado de la ejecución de estas operaciones?:

```javascript
6 / "3"//2
"2" * "3" //6
4 + 5 + "px" //"9px"
"$" + 4 + 5 //"$45"
"4" - 2 // 2
"4px" - 2//NaN (Not a number)
7 / 0// infinito
{}[0]//undefined
parseInt("09")//9  si fuera parseInt("09abc") da 9, si fuera parseInt("abc09")
5 && 2 // 2
2 && 5 // 5 si fuera 2 && 5 && 6 && 0 da 0, si fuera 0 && 2 && 5 && 6 da 0
5 || 0 //5 
0 || 5 //5  
[3]+[3]-[10] // 23, concatena los dos 3 como strings, y con el - hace la resta con el otro string 10
               // convirtiendolos a numeros
3>2>1 //false porque 3>2 es true. y luego true>1 es false porque true es 1
[] == ![] // true porque:
//[] ==  false luego convirte a :
//[] == 0 luego :
//"" == 0 luego:
// 0 == 0 luego da
// true
```

> Si te quedó alguna duda repasá con [este artículo](http://javascript.info/tutorial/object-conversion).


### Hoisting

¿Cuál es el output o salida en consola luego de ejecutar este código? Explicar por qué:

```javascript
function test() {
   console.log(a); //undefined
   console.log(foo());// 2

   var a = 1;
   function foo() {
      return 2;
   }
}

test();
```

Y el de este código? :

```javascript
var snack = 'Meow Mix';

function getFood(food) {
    if (food) {
        var snack = 'Friskies';
        return snack;
    }
    return snack;
}

getFood(false);//'undnefined'
```


### This

¿Cuál es el output o salida en consola luego de ejecutar esté código? Explicar por qué:

```javascript
var fullname = 'Juan Perez';
var obj = {
   fullname: 'Natalia Nerea',
   prop: {
      fullname: 'Aurelio De Rosa',
      getFullname: function() {
         return this.fullname;
      }
   }
};

console.log(obj.prop.getFullname()); //Aurelio de Rosa porque la asignacion del valor a la propiedad fullname esta dentro de mismo bloque el que this

var test = obj.prop.getFullname;

console.log(test()); //el nombre de la propiedad fullname porque no se esta invocando a la funcion al no poner los ()
```

### Event loop

Considerando el siguiente código, ¿Cuál sería el orden en el que se muestra por consola? ¿Por qué?

```javascript
function printing() {
   console.log(1);
   setTimeout(function() { console.log(2); }, 1000);
   setTimeout(function() { console.log(3); }, 0);
   console.log(4);
}

printing();//1, 4, 3, 2 porque console:log(4) se ejecuta unmas inmediatamente que el (3) aunque tenga 0 segundos en el setTimeOut 
```
